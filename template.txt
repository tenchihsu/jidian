<template>
  <div class="app-container">
    <div class="filter-container">
      <el-input
        v-model="listQuery.search"
        placeholder="搜尋範本"
        style="width: 200px;"
        class="filter-item"
        @keyup.enter.native="handleFilter"
      />
      <el-select
        v-model="listQuery.type"
        placeholder="範本類型"
        clearable
        style="width: 130px"
        class="filter-item"
      >
        <el-option
          v-for="item in typeOptions"
          :key="item.value"
          :label="item.label"
          :value="item.value"
        />
      </el-select>
      <el-button class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">
        搜尋
      </el-button>
      <el-button class="filter-item" type="success" icon="el-icon-plus" @click="handleCreate">
        新增範本
      </el-button>
    </div>

    <el-table
      v-loading="listLoading"
      :data="list"
      border
      fit
      highlight-current-row
      style="width: 100%"
    >
      <el-table-column label="ID" prop="id" align="center" width="80" />
      
      <el-table-column label="名稱" min-width="120">
        <template slot-scope="{row}">
          <span class="link-type" @click="handleUpdate(row)">{{ row.name }}</span>
        </template>
      </el-table-column>

      <el-table-column label="類型" width="120" align="center">
        <template slot-scope="{row}">
          <el-tag>{{ row.type }}</el-tag>
        </template>
      </el-table-column>

      <el-table-column label="標題範本" min-width="200" />

      <el-table-column label="建立時間" width="160" align="center">
        <template slot-scope="{row}">
          <span>{{ row.created_at | parseTime('{y}-{m}-{d} {h}:{i}') }}</span>
        </template>
      </el-table-column>

      <el-table-column label="操作" align="center" width="250">
        <template slot-scope="{row}">
          <el-button type="primary" size="mini" @click="handleUpdate(row)">
            編輯
          </el-button>
          <el-button type="success" size="mini" @click="handleUse(row)">
            使用
          </el-button>
          <el-button type="danger" size="mini" @click="handleDelete(row)">
            刪除
          </el-button>
        </template>
      </el-table-column>
    </el-table>

    <pagination
      v-show="total>0"
      :total="total"
      :page.sync="listQuery.page"
      :limit.sync="listQuery.limit"
      @pagination="getList"
    />

    <el-dialog :title="dialogTitle" :visible.sync="dialogVisible">
      <el-form
        ref="dataForm"
        :rules="rules"
        :model="temp"
        label-position="right"
        label-width="100px"
      >
        <el-form-item label="範本名稱" prop="name">
          <el-input v-model="temp.name" />
        </el-form-item>

        <el-form-item label="範本類型" prop="type">
          <el-select v-model="temp.type" class="filter-item">
            <el-option
              v-for="item in typeOptions"
              :key="item.value"
              :label="item.label"
              :value="item.value"
            />
          </el-select>
        </el-form-item>

        <el-form-item label="標題範本" prop="title_template">
          <el-input v-model="temp.title_template">
            <template slot="append">
              <el-dropdown @command="handleInsertVariable">
                <span class="el-dropdown-link">
                  插入變數<i class="el-icon-arrow-down el-icon--right" />
                </span>
                <el-dropdown-menu slot="dropdown">
                  <el-dropdown-item v-for="item in variables" :key="item.value" :command="item.value">
                    {{ item.label }}
                  </el-dropdown-item>
                </el-dropdown-menu>
              </el-dropdown>
            </template>
          </el-input>
        </el-form-item>

        <el-form-item label="內容範本" prop="content_template">
          <el-input
            v-model="temp.content_template"
            type="textarea"
            :rows="6"
          />
          <div class="variable-buttons">
            <el-button
              v-for="item in variables"
              :key="item.value"
              size="mini"
              @click="insertContentVariable(item.value)"
            >
              {{ item.label }}
            </el-button>
          </div>
        </el-form-item>

        <el-form-item label="描述" prop="description">
          <el-input
            v-model="temp.description"
            type="textarea"
            :rows="2"
          />
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogVisible = false">
          取消
        </el-button>
        <el-button type="primary" @click="handleSubmit">
          確認
        </el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import { getTemplates, createTemplate, updateTemplate, deleteTemplate } from '@/api/notification'
import Pagination from '@/components/Pagination'

export default {
  name: 'NotificationTemplate',
  components: { Pagination },
  data() {
    return {
      list: [],
      total: 0,
      listLoading: true,
      listQuery: {
        page: 1,
        limit: 10,
        search: '',
        type: ''
      },
      typeOptions: [
        { label: '系統通知', value: 'system' },
        { label: '活動通知', value: 'activity' },
        { label: '更新通知', value: 'update' }
      ],
      variables: [
        { label: '用戶名稱', value: '${user_name}' },
        { label: '時間', value: '${time}' },
        { label: '積分', value: '${points}' }
      ],
      dialogVisible: false,
      dialogTitle: '',
      temp: {
        id: undefined,
        name: '',
        type: '',
        title_template: '',
        content_template: '',
        description: ''
      },
      rules: {
        name: [{ required: true, message: '請輸入範本名稱', trigger: 'blur' }],
        type: [{ required: true, message: '請選擇範本類型', trigger: 'change' }],
        title_template: [{ required: true, message: '請輸入標題範本', trigger: 'blur' }],
        content_template: [{ required: true, message: '請輸入內容範本', trigger: 'blur' }]
      }
    }
  },
  created() {
    this.getList()
  },
  methods: {
    async getList() {
      this.listLoading = true
      try {
        const { data } = await getTemplates(this.listQuery)
        this.list = data.items
        this.total = data.total
      } finally {
        this.listLoading = false
      }
    },
    handleFilter() {
      this.listQuery.page = 1
      this.getList()
    },
    resetTemp() {
      this.temp = {
        id: undefined,
        name: '',
        type: '',
        title_template: '',
        content_template: '',
        description: ''
      }
    },
    handleCreate() {
      this.resetTemp()
      this.dialogTitle = '新增範本'
      this.dialogVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    handleUpdate(row) {
      this.temp = Object.assign({}, row)
      this.dialogTitle = '編輯範本'
      this.dialogVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    handleUse(row) {
      this.$router.push({
        name: 'NotificationCreate',
        params: { template: row }
      })
    },
    async handleSubmit() {
      this.$refs['dataForm'].validate(async valid => {
        if (valid) {
          try {
            if (this.temp.id) {
              await updateTemplate(this.temp.id, this.temp)
            } else {
              await createTemplate(this.temp)
            }
            this.dialogVisible = false
            this.getList()
            this.$message({
              type: 'success',
              message: this.temp.id ? '更新成功' : '創建成功'
            })
          } catch (error) {
            console.error('提交失敗:', error)
          }
        }
      })
    },
    async handleDelete(row) {
      try {
        await this.$confirm('確認刪除此範本？', '提示', {
          confirmButtonText: '確定',
          cancelButtonText: '取消',
          type: 'warning'
        })
        await deleteTemplate(row.id)
        this.getList()
        this.$message({
          type: 'success',
          message: '刪除成功'
        })
      } catch (error) {
        console.error('刪除失敗:', error)
      }
    },
    handleInsertVariable(variable) {
      const textarea = this.$refs.titleInput.$refs.input
      const start = textarea.selectionStart
      const end = textarea.selectionEnd
      this.temp.title_template = this.temp.title_template.substring(0, start) +
        variable +
        this.temp.title_template.substring(end)
    },
    insertContentVariable(variable) {
      const textarea = this.$refs.contentInput.$refs.textarea
      const start = textarea.selectionStart
      const end = textarea.selectionEnd
      this.temp.content_template = this.temp.content_template.substring(0, start) +
        variable +
        this.temp.content_template.substring(end)
    }
  }
}
</script>

<style lang="scss" scoped>
.filter-container {
  padding-bottom: 10px;
  .filter-item {
    margin-right: 10px;
  }
}

.variable-buttons {
  margin-top: 10px;
  .el-button {
    margin: 5px;
  }
}

.el-dropdown-link {
  cursor: pointer;
  color: #409EFF;
}
</style>